// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  jQuery(function() {
    var CustomerControllerView, CustomerListItemView, CustomersListView, CustomersTable, _ref;
    CustomerControllerView = (function(_super) {

      __extends(CustomerControllerView, _super);

      function CustomerControllerView() {
        return CustomerControllerView.__super__.constructor.apply(this, arguments);
      }

      CustomerControllerView.prototype.el = '#customer-main-content';

      CustomerControllerView.prototype.events = {
        'click #customer-menu-pill': 'renderCustomersListView',
        'click #customer-list-tab': 'renderCustomersListView',
        'click #customer-item-tab': 'renderCustomerDefaultItemView',
        'click #customer-create-tab': 'renderCustomerCreateView',
        'click #order-menu-pill': 'renderOrderListView'
      };

      CustomerControllerView.prototype.initialize = function() {
        return this.currentView = null;
      };

      CustomerControllerView.prototype.renderCustomersListView = function() {
        if (this.currentView) {
          this.currentView.$el.html("");
        }
        this.currentView = new CustomersListView();
        return this.currentView.render();
      };

      CustomerControllerView.prototype.renderCustomerDefaultItemView = function() {
        if (this.currentView) {
          this.currentView.$el.html("");
        }
        this.currentView = new CustomerItemView();
        return this.currentView.render(app.Customers.models[0]);
      };

      CustomerControllerView.prototype.renderCustomerSpecificItemView = function(model) {
        if (this.currentView) {
          this.currentView.$el.html("");
        }
        $('#customer-item-tab a').tab('show');
        this.currentView = new CustomerItemView();
        return this.currentView.render(model);
      };

      CustomerControllerView.prototype.renderCustomerCreateView = function() {
        if (this.currentView) {
          this.currentView.$el.html("");
        }
        this.currentView = new CustomerCreateView();
        return this.currentView.render();
      };

      CustomerControllerView.prototype.renderOrderListView = function() {
        if (this.currentView) {
          this.currentView.$el.html("");
        }
        this.currentView = new OrderListView();
        return this.currentView.render();
      };

      return CustomerControllerView;

    })(Backbone.View);
    CustomersListView = (function(_super) {

      __extends(CustomersListView, _super);

      function CustomersListView() {
        return CustomersListView.__super__.constructor.apply(this, arguments);
      }

      CustomersListView.prototype.el = '#customers-list-view-content';

      CustomersListView.prototype.events = {
        'change #store-name-select': 'renderCustomersTable'
      };

      CustomersListView.prototype.template = _.template(($('#customer-content-template')).html());

      CustomersListView.prototype.initialize = function(options) {
        this.storeSelectView = new CustomersListStoreSelectView();
        return this.customersTable = new CustomersTable();
      };

      CustomersListView.prototype.render = function() {
        this.$el.html(this.template({}));
        $("#customer-view-head").html(this.storeSelectView.render().el);
        return $("#customer-view-body").html(this.customersTable.render().el);
      };

      CustomersListView.prototype.renderCustomersTable = function() {
        return this.customersTable.render();
      };

      return CustomersListView;

    })(Backbone.View);
    CustomersTable = (function(_super) {

      __extends(CustomersTable, _super);

      function CustomersTable() {
        return CustomersTable.__super__.constructor.apply(this, arguments);
      }

      CustomersTable.prototype.template = _.template(($('#customers-table-template')).html());

      CustomersTable.prototype.render = function() {
        this.$el.html(this.template({}));
        this.addAll();
        return this;
      };

      CustomersTable.prototype.addOne = function(customer) {
        var view;
        if ($('#store-name-select').val() === customer.get('storeName')) {
          view = new CustomerListItemView({
            model: customer
          });
          return (this.$("#customers-table-list")).append(view.render().el);
        }
      };

      CustomersTable.prototype.addAll = function() {
        return app.Customers.each(this.addOne, this);
      };

      return CustomersTable;

    })(Backbone.View);
    CustomerListItemView = (function(_super) {

      __extends(CustomerListItemView, _super);

      function CustomerListItemView() {
        return CustomerListItemView.__super__.constructor.apply(this, arguments);
      }

      CustomerListItemView.prototype.tagName = 'tr';

      CustomerListItemView.prototype.events = {
        'mouseover': 'showCustomerOptions',
        'mouseout': 'hideCustomerOptions',
        'click #customer-view-eye-link': 'renderCustomerItemView'
      };

      CustomerListItemView.prototype.template = _.template(($('#customer-tr-template')).html());

      CustomerListItemView.prototype.render = function() {
        this.$el.html(this.template(this.model.attributes));
        $(this.el).find('i').hide();
        return this;
      };

      CustomerListItemView.prototype.showCustomerOptions = function(event) {
        return $(this.el).find('i').show();
      };

      CustomerListItemView.prototype.hideCustomerOptions = function(event) {
        return $(this.el).find('i').hide();
      };

      CustomerListItemView.prototype.renderCustomerItemView = function() {
        return app.appControllerView.customerControllerView.renderCustomerSpecificItemView(this.model);
      };

      return CustomerListItemView;

    })(Backbone.View);
    this.app = (_ref = window.app) != null ? _ref : {};
    return this.app.CustomerControllerView = CustomerControllerView;
  });

}).call(this);
