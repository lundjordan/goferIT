// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  jQuery(function() {
    var InventoryControllerView, OrderListView, ProductItemBodyView, ProductItemContentView, ProductItemSubQuantityView, ProductItemSupplierNameView, ProductItemView, ProductListItemView, ProductsListView, ProductsTable, StoreSelectView, _ref;
    InventoryControllerView = (function(_super) {

      __extends(InventoryControllerView, _super);

      function InventoryControllerView() {
        return InventoryControllerView.__super__.constructor.apply(this, arguments);
      }

      InventoryControllerView.prototype.el = '#inventory-main-content';

      InventoryControllerView.prototype.events = {
        'click #product-menu-pill': 'renderProductsListView',
        'click #inventory-list-tab': 'renderProductsListView',
        'click #inventory-item-tab': 'renderProductDefaultItemView',
        'click #order-menu-pill': 'renderOrderListView'
      };

      InventoryControllerView.prototype.renderProductsListView = function() {
        var productsListView;
        productsListView = new ProductsListView();
        return productsListView.render();
      };

      InventoryControllerView.prototype.renderProductDefaultItemView = function() {
        var productItemView;
        productItemView = new ProductItemView();
        return productItemView.render(app.Products.models[0]);
      };

      InventoryControllerView.prototype.renderProductSpecificItemView = function(model) {
        var productItemView;
        $('#inventory-item-tab a').tab('show');
        productItemView = new ProductItemView();
        return productItemView.render(model);
      };

      InventoryControllerView.prototype.renderOrderListView = function() {
        var orderListView;
        orderListView = new OrderListView();
        return orderListView.render();
      };

      return InventoryControllerView;

    })(Backbone.View);
    StoreSelectView = (function(_super) {

      __extends(StoreSelectView, _super);

      function StoreSelectView() {
        return StoreSelectView.__super__.constructor.apply(this, arguments);
      }

      StoreSelectView.prototype.el = '#products-view-head';

      StoreSelectView.prototype.template = _.template(($('#store-names-template')).html());

      StoreSelectView.prototype.render = function() {
        var store, storeNames, _i, _len;
        this.$el.html(this.template({}));
        storeNames = app.Companies.models[0].get('stores');
        for (_i = 0, _len = storeNames.length; _i < _len; _i++) {
          store = storeNames[_i];
          this.addToSelect(store.name);
        }
        return this;
      };

      StoreSelectView.prototype.addToSelect = function(storeName) {
        return this.$('#store-name-select').append("<option>" + storeName + "</option>");
      };

      return StoreSelectView;

    })(Backbone.View);
    ProductsListView = (function(_super) {

      __extends(ProductsListView, _super);

      function ProductsListView() {
        return ProductsListView.__super__.constructor.apply(this, arguments);
      }

      ProductsListView.prototype.el = '#products-list-view-content';

      ProductsListView.prototype.events = {
        'change #store-name-select': 'renderProductsTable'
      };

      ProductsListView.prototype.initialize = function(options) {
        this.storeSelectView = new StoreSelectView();
        return this.productsTable = new ProductsTable();
      };

      ProductsListView.prototype.render = function() {
        this.storeSelectView.render();
        return this.productsTable.render();
      };

      ProductsListView.prototype.renderProductsTable = function() {
        return this.productsTable.render();
      };

      return ProductsListView;

    })(Backbone.View);
    ProductsTable = (function(_super) {

      __extends(ProductsTable, _super);

      function ProductsTable() {
        return ProductsTable.__super__.constructor.apply(this, arguments);
      }

      ProductsTable.prototype.el = '#products-view-body';

      ProductsTable.prototype.template = _.template(($('#products-table-template')).html());

      ProductsTable.prototype.render = function() {
        this.$el.html(this.template({}));
        this.addAll();
        return this;
      };

      ProductsTable.prototype.addOne = function(product) {
        var view;
        if ($('#store-name-select').val() === product.get('storeName')) {
          view = new ProductListItemView({
            model: product
          });
          return (this.$("#products-table-list")).append(view.render().el);
        }
      };

      ProductsTable.prototype.addAll = function() {
        return app.Products.each(this.addOne, this);
      };

      return ProductsTable;

    })(Backbone.View);
    ProductListItemView = (function(_super) {

      __extends(ProductListItemView, _super);

      function ProductListItemView() {
        return ProductListItemView.__super__.constructor.apply(this, arguments);
      }

      ProductListItemView.prototype.tagName = 'tr';

      ProductListItemView.prototype.events = {
        'mouseover': 'showProductOptions',
        'mouseout': 'hideProductOptions',
        'click #product-view-eye-link': 'renderProductItemView'
      };

      ProductListItemView.prototype.template = _.template(($('#product-tr-template')).html());

      ProductListItemView.prototype.render = function() {
        this.$el.html(this.template(this.model.attributes));
        $(this.el).find('i').hide();
        return this;
      };

      ProductListItemView.prototype.showProductOptions = function(event) {
        return $(this.el).find('i').show();
      };

      ProductListItemView.prototype.hideProductOptions = function(event) {
        return $(this.el).find('i').hide();
      };

      ProductListItemView.prototype.renderProductItemView = function() {
        return app.appControllerView.inventoryControllerView.renderProductSpecificItemView(this.model);
      };

      return ProductListItemView;

    })(Backbone.View);
    ProductItemView = (function(_super) {

      __extends(ProductItemView, _super);

      function ProductItemView() {
        return ProductItemView.__super__.constructor.apply(this, arguments);
      }

      ProductItemView.prototype.el = '#product-item-view-content';

      ProductItemView.prototype.events = {
        'click #product-item-prev-link': 'renderProductItemPrevView',
        'click #product-item-next-link': 'renderProductItemNextView'
      };

      ProductItemView.prototype.initialize = function(options) {
        return this.productView = new ProductItemBodyView();
      };

      ProductItemView.prototype.render = function(productModel) {
        this.model = productModel;
        return this.productView.render(this.model);
      };

      ProductItemView.prototype.renderProductItemPrevView = function(event) {
        this.model = app.Products.findPrev(this.model);
        return this.productView.render(this.model);
      };

      ProductItemView.prototype.renderProductItemNextView = function(event) {
        this.model = app.Products.findNext(this.model);
        return this.productView.render(this.model);
      };

      return ProductItemView;

    })(Backbone.View);
    ProductItemBodyView = (function(_super) {

      __extends(ProductItemBodyView, _super);

      function ProductItemBodyView() {
        return ProductItemBodyView.__super__.constructor.apply(this, arguments);
      }

      ProductItemBodyView.prototype.el = '#product-item-view-body';

      ProductItemBodyView.prototype.template = _.template(($('#product-view-template')).html());

      ProductItemBodyView.prototype.initialize = function() {
        return this.currentProduct = null;
      };

      ProductItemBodyView.prototype.render = function(productModel) {
        this.$el.html(this.template({}));
        this.renderProductContent(productModel);
        return this;
      };

      ProductItemBodyView.prototype.renderProductContent = function(productModel) {
        this.currentProduct = new ProductItemContentView();
        this.currentProductSupplier = new ProductItemSupplierNameView();
        this.currentProductItemSubQuantity = new ProductItemSubQuantityView();
        this.$('#product-view-content').html(this.currentProduct.render(productModel).el);
        this.$('#product-view-supplier-name').html(this.currentProductSupplier.render(productModel).el);
        if (productModel.attributes.subTotalQuantity) {
          return this.$('#sub-quantity-totals').html(this.currentProductItemSubQuantity.render(productModel).el);
        }
      };

      return ProductItemBodyView;

    })(Backbone.View);
    ProductItemContentView = (function(_super) {

      __extends(ProductItemContentView, _super);

      function ProductItemContentView() {
        return ProductItemContentView.__super__.constructor.apply(this, arguments);
      }

      ProductItemContentView.prototype.className = 'container-fluid';

      ProductItemContentView.prototype.template = _.template(($('#product-view-content-template')).html());

      ProductItemContentView.prototype.render = function(productModel) {
        console.log(productModel.attributes);
        this.$el.html(this.template(productModel.attributes));
        return this;
      };

      return ProductItemContentView;

    })(Backbone.View);
    ProductItemSupplierNameView = (function(_super) {

      __extends(ProductItemSupplierNameView, _super);

      function ProductItemSupplierNameView() {
        return ProductItemSupplierNameView.__super__.constructor.apply(this, arguments);
      }

      ProductItemSupplierNameView.prototype.template = _.template(($('#product-view-supplier-name-template')).html());

      ProductItemSupplierNameView.prototype.render = function(productModel) {
        var supplierID, supplierName;
        if (productModel.attributes._order) {
          supplierID = productModel.attributes._order._supplier;
          supplierName = app.Suppliers.get(supplierID);
          this.$el.html(this.template(supplierName.attributes));
        } else {
          this.$el.html(this.template({
            name: 'N/A'
          }));
        }
        return this;
      };

      return ProductItemSupplierNameView;

    })(Backbone.View);
    ProductItemSubQuantityView = (function(_super) {

      __extends(ProductItemSubQuantityView, _super);

      function ProductItemSubQuantityView() {
        return ProductItemSubQuantityView.__super__.constructor.apply(this, arguments);
      }

      ProductItemSubQuantityView.prototype.className = 'container-fluid';

      ProductItemSubQuantityView.prototype.template = _.template(($('#product-view-sub-quantity-template')).html());

      ProductItemSubQuantityView.prototype.render = function(productModel) {
        var productSubQuants, tableHeaderValues, tableRow1Values;
        productSubQuants = productModel.attributes.subTotalQuantity;
        _.sortBy(productSubQuants, function(el) {
          return el.measurementValue;
        });
        this.$el.html(this.template({}));
        tableHeaderValues = "<th>" + productSubQuants[0].measurementName + "</th>";
        tableRow1Values = "<td>Totals</td>";
        _.each(productSubQuants, function(el) {
          tableHeaderValues += "<th>" + el.measurementValue + "</th>";
          return tableRow1Values += "<td>" + el.quantity + "</td>";
        });
        this.$('#product-sub-quantity-thead-tr').append(tableHeaderValues);
        this.$('#product-sub-quantity-tbody-td').append(tableRow1Values);
        return this;
      };

      return ProductItemSubQuantityView;

    })(Backbone.View);
    OrderListView = (function(_super) {

      __extends(OrderListView, _super);

      function OrderListView() {
        return OrderListView.__super__.constructor.apply(this, arguments);
      }

      OrderListView.prototype.el = '#order-list-view';

      OrderListView.prototype.template = _.template(($('#order-list-template')).html());

      OrderListView.prototype.render = function() {
        return this.$el.html(this.template({}));
      };

      return OrderListView;

    })(Backbone.View);
    this.app = (_ref = window.app) != null ? _ref : {};
    return this.app.InventoryControllerView = InventoryControllerView;
  });

}).call(this);
