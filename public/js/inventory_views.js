// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  jQuery(function() {
    var InventoryControllerView, OrderListView, ProductItemView, ProductListView, _ref;
    InventoryControllerView = (function(_super) {

      __extends(InventoryControllerView, _super);

      function InventoryControllerView() {
        return InventoryControllerView.__super__.constructor.apply(this, arguments);
      }

      InventoryControllerView.prototype.el = '#inventory-main-content';

      InventoryControllerView.prototype.events = {
        'click #product-menu-pill': 'renderProductListView',
        'click #order-menu-pill': 'renderOrderListView'
      };

      InventoryControllerView.prototype.initialize = function() {
        this.productSubViews = {
          productListView: new ProductListView({
            collection: app.products
          })
        };
        this.orderSubViews = {
          orderListView: new OrderListView()
        };
        return this.currentContentView = this.productSubViews.productListView;
      };

      InventoryControllerView.prototype.render = function() {
        return this.currentContentView.render();
      };

      InventoryControllerView.prototype.renderProductListView = function() {
        this.currentContentView = this.productSubViews.productListView;
        return this.render();
      };

      InventoryControllerView.prototype.renderOrderListView = function() {
        this.currentContentView = this.orderSubViews.orderListView;
        return this.render();
      };

      return InventoryControllerView;

    })(Backbone.View);
    ProductListView = (function(_super) {

      __extends(ProductListView, _super);

      function ProductListView() {
        return ProductListView.__super__.constructor.apply(this, arguments);
      }

      ProductListView.prototype.el = '#product-list-view';

      ProductListView.prototype.template = _.template(($('#product-list-template')).html());

      ProductListView.prototype.render = function() {
        this.$el.html(this.template({}));
        this.addAll();
        return this;
      };

      ProductListView.prototype.addOne = function(product) {
        var view;
        view = new ProductItemView({
          model: product
        });
        return (this.$("#inventory-table-list")).append(view.render().el);
      };

      ProductListView.prototype.addAll = function() {
        return app.Products.each(this.addOne, this);
      };

      return ProductListView;

    })(Backbone.View);
    ProductItemView = (function(_super) {

      __extends(ProductItemView, _super);

      function ProductItemView() {
        return ProductItemView.__super__.constructor.apply(this, arguments);
      }

      ProductItemView.prototype.tagName = 'tr';

      ProductItemView.prototype.events = {
        'mouseover': 'showProductOptions',
        'mouseout': 'hideProductOptions'
      };

      ProductItemView.prototype.template = _.template(($('#product-item-template')).html());

      ProductItemView.prototype.render = function() {
        this.$el.html(this.template(this.model.toJSON()));
        $(this.el).find('i').hide();
        return this;
      };

      ProductItemView.prototype.showProductOptions = function(event) {
        console.log("mouse over " + (this.model.get('cost')));
        return $(this.el).find('i').show();
      };

      ProductItemView.prototype.hideProductOptions = function(event) {
        console.log("mouse out " + (this.model.get('cost')));
        return $(this.el).find('i').hide();
      };

      return ProductItemView;

    })(Backbone.View);
    OrderListView = (function(_super) {

      __extends(OrderListView, _super);

      function OrderListView() {
        return OrderListView.__super__.constructor.apply(this, arguments);
      }

      OrderListView.prototype.el = '#order-list-view';

      OrderListView.prototype.template = _.template(($('#order-list-template')).html());

      OrderListView.prototype.render = function() {
        return this.$el.html(this.template({}));
      };

      return OrderListView;

    })(Backbone.View);
    this.app = (_ref = window.app) != null ? _ref : {};
    return this.app.InventoryControllerView = InventoryControllerView;
  });

}).call(this);
