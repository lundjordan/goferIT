// Generated by CoffeeScript 1.3.3
var LocalStrategy, app, express, findById, findByUsername, flash, mongoose, passport, path, server, users, util;

express = require('express');

mongoose = require('mongoose');

path = require('path');

passport = require('passport');

flash = require('connect-flash');

util = require('util');

LocalStrategy = (require('passport-local')).Strategy;

users = [
  {
    id: 1,
    username: 'bob',
    password: 'secret',
    email: 'bob@example.com'
  }, {
    id: 2,
    username: 'joe',
    password: 'birthday',
    email: 'joe@example.com'
  }
];

findById = function(id, fn) {
  if (users[id - 1]) {
    return fn(null, users[id - 1]);
  } else {
    return fn(new Error("User " + id + " does not exist"));
  }
};

findByUsername = function(username, fn) {
  var user, _i, _len;
  for (_i = 0, _len = users.length; _i < _len; _i++) {
    user = users[_i];
    if (user.username === username) {
      return fn(null, user);
    } else {
      return fn(null, null);
    }
  }
};

passport.serializeUser(function(user, done) {
  return done(null, user.id);
});

passport.deserializeUser(function(id, done) {
  return findById(id, function(err, user) {
    return done(err, user);
  });
});

passport.use(new LocalStrategy(function(username, password, done) {
  return process.nextTick(function() {
    return findByUsername(username, function(err, user) {
      if (err) {
        return done(err);
      }
      if (!user) {
        return done(null, false, {
          message: "Unknown user " + username
        });
      }
      if (user.password !== password) {
        return done(null, false, {
          message: 'Invalid password'
        });
      }
      return done(null, user);
    });
  });
}));

app = module.exports = express();

app.configure(function() {
  app.set('port', process.env.PORT || 3000);
  app.set('views', "" + __dirname + "/views");
  app.set('view engine', 'jade');
  app.use(express.favicon());
  app.use(express.cookieParser());
  app.use(express.logger('dev'));
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(express.session({
    secret: 'keyboard cat'
  }));
  app.use(flash());
  app.use(passport.initialize());
  app.use(passport.session());
  app.use(app.router);
  return app.use(express["static"](path.join(__dirname, 'public')));
});

app.configure('development', function() {
  return app.use(express.errorHandler());
});

app.configure('test', function() {
  return app.set('port', 3001);
});

app.get('/', function(req, res) {
  return res.render('index', {
    title: 'Gofer',
    stylesheet: 'index',
    user: req.user
  });
});

(require('./apps/authentication/routes'))(app, passport);

server = app.listen(app.settings.port);

console.log("Express server listening on port " + app.settings.port + " in " + app.settings.env + " mode");
